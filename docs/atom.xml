<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ryanstian的博客</title>
  
  
  <link href="https://ryanstian.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://ryanstian.github.io/blog/"/>
  <updated>2021-08-30T15:06:16.045Z</updated>
  <id>https://ryanstian.github.io/blog/</id>
  
  <author>
    <name>Ryanstian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简记20210829224600</title>
    <link href="https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210829224600/"/>
    <id>https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210829224600/</id>
    <published>2021-08-29T14:46:00.000Z</published>
    <updated>2021-08-30T15:06:16.045Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="四、语言真的那么重要吗？-C-java-go-py"><a href="#四、语言真的那么重要吗？-C-java-go-py" class="headerlink" title="四、语言真的那么重要吗？(C+,java,go,py)"></a>四、语言真的那么重要吗？(C+,java,go,py)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一位小伙在论坛大喊：Java天下第一!</span><br><span class="line">随后，一场键盘战争开始了</span><br></pre></td></tr></table></figure><p>我曾看到过数不清的段子，大致含义相同，都是争论自己使用的语言是最好的语言。  </p><p>起初我认为语言非常重要，把他当作未来深入前进的方向，由此会将语言特性示若圣经，潜意识里排斥其他语言的工作。<br>最有代表性的事件，就是在投递工作简历时，会特地寻找Java工程师的JD。遇到其他语言，则会犹豫再三</p><p>后来一次偶然的机会，接触到golang相关的工作。golang对我来说是一种全新的语言，我对它的特性毫不了解。<br>这得我在工作时无暇顾及其特性把问题解决方案，用我手中的工具去落地实践。  </p><p>在一阵忙碌后，轻松下来的自己复盘之前的工作。偶然间发现，即时不用语言特性，我也依旧能做到任何事情？？？<br>//TODO 没灵感，搁置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;四、语言真的那么重要吗？-C-java-go-py&quot;&gt;&lt;a href=&quot;#四、语言真的那么重要吗？-C-java-go-py&quot; class=&quot;headerlink&quot; title=&quot;四、语言真的那么重要吗？(C+,ja</summary>
      
    
    
    
    <category term="简记" scheme="https://ryanstian.github.io/blog/categories/%E7%AE%80%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>简记20210822191000</title>
    <link href="https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210822191000/"/>
    <id>https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210822191000/</id>
    <published>2021-08-22T09:43:00.000Z</published>
    <updated>2021-08-26T16:01:42.928Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="三、能RUN就行"><a href="#三、能RUN就行" class="headerlink" title="三、能RUN就行"></a>三、能RUN就行</h1><p>这是一则真实的段子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有人在网上发帖提问</span><br><span class="line">提问者：自己写的代码太难看了怎么办？</span><br><span class="line">路人A：能run吗？</span><br><span class="line">提问者：我run还是代码run？</span><br><span class="line">路人B：有一个能run就行</span><br></pre></td></tr></table></figure><p>不得不说，真的是人间真实。接下来我们聊一聊，该如何做到“能RUN就行”。</p><p>记得在我刚刚实习的时候，一段简单的代码写了改，改了写，最后推到重构。写完了，自己看着代码非常愉悦，但却又因几天后的一个紧急需求，不得不改成他最初的样子。</p><p>经过了一年的修修补补，我理解了什么叫“能RUN就行”。当然，这仅针对业务代码而言，因为业务需要紧跟市场脚步，需要的是最短时间代码能RUN，不宕机，而且后面还改的动，能坚持到下次被重构，这就是一份代码的使命。</p><p>之前我曾看到有人这么评价业务架构师（注意是业务）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">程序员的作用是堆粪。架构师的作用是搭架子。</span><br><span class="line">屎山堆高，自己就塌了。有架子在，尽管臭，却能用</span><br></pre></td></tr></table></figure><p>实在是很形象了。</p><p>平时我们设计方案也是如此，方案不是越复杂越好，难的不是把方案完成，而是把复杂方案简单化。</p><p>比如说才几万条数据，没啥热点，未来2年也不会增长到接近几百万，这时候来个分库分表，实属闲的。等到后面做编码的时候，这分库分表的编码复杂度反而得不偿失。</p><p>又比如各个表都是按相同维度进行分表，你经过一系列的分析，算出来这个表该分表10张，另一个15张，再来一个50张。<br>当你接到个批量跨表数据分析工作，麻烦就来了。</p><ul><li>扫全表，压力大。</li><li>扫单表，你就只能根据分表id计算最大公倍数，再来hash到对应分表  </li></ul><p>或许这里有人会反驳，数据分析这种东西，不都是用数仓么？<br>但是这仅是个例子，不是所有的公司都支撑的起数仓，也不是所有的数据分析业务都需要放到数仓去跑</p><p>我曾经也是追逐“完美”的人，但在追逐过程中我学到：<br>世上并没有真正的完美，但从一种角度，它是完美的。但换一种角度，丑陋不堪。最终美好的仅是综合情况下的取舍。</p><p>话说回来，一切都要讲究变通。  </p><p>曾经我见过有人为了尽量少的采用中间件，用mysql来控制并发场景下的库存，还设计预分配库存量等机制。<br>显然，运行了一段时间后QPS上来，程序RUN实在不动，人RUN了。<br>我们只能含泪接手代码，花费大力气把他的设计废掉改用redis</p><p>总之，不要为了复杂而复杂，也不要为了简化而简化，凡事讲究有度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;三、能RUN就行&quot;&gt;&lt;a href=&quot;#三、能RUN就行&quot; class=&quot;headerlink&quot; title=&quot;三、能RUN就行&quot;&gt;&lt;/a&gt;三、能RUN就行&lt;/h1&gt;&lt;p&gt;这是一则真实的段子&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="简记" scheme="https://ryanstian.github.io/blog/categories/%E7%AE%80%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>简记20210822174300</title>
    <link href="https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210822174300/"/>
    <id>https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210822174300/</id>
    <published>2021-08-22T09:43:00.000Z</published>
    <updated>2021-08-26T15:56:18.584Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="二、跳出固化思维"><a href="#二、跳出固化思维" class="headerlink" title="二、跳出固化思维"></a>二、跳出固化思维</h1><p>经过第一阶段在摸爬滚打，相信已经有了些许积累，学到了很多。  </p><p>这时，我相信你至少已经知道了。什么时候该用分库分表，什么时候该用redis，什么时候该用kafka等等一系列的简单应用。</p><p>大致了解原理以及会用是一方面，精通又是另一方面。大部分工作的人，也仅仅是了解原理及停留在会用的阶段。当然这并不会妨碍我们用它们来设计我们的程序。</p><p>好了，让我们回归正题。</p><p>当你进行一项程序，我希望你忘记自己学过的各种中间件，学过的各种语言等等。</p><p>此时便可以从程序本质出发，从需求开始，一点点分析你需要哪些特性来组装出你的程序，然后去寻找适合的技能，而非从自己所有的技能中做排除法。</p><p>等我们把所需的特性一一列出以后。才是需要结合团队掌握的技能，以及底层支持等各种情况，来进行综合考虑的情况。</p><p>这里我会举几个例子，当然受限于保密等原因，无法说的太过详细。但已经足以辅助理解。</p><p>examle1：<br>刚入职场时曾经遇到了这样一个问题：  </p><p>我需要定时对一系列的信息进行处理，根据来源方不通进行不同的处理规则，处理规则依托于各渠道方强相关。  </p><p>并且在我程序运行过程中，还会源源不断的增加新来源方，以及改变旧有渠道处理方式。  </p><p>在我处理完数据后，会对几方数据进行比对，然后根据渠道组合不同，定制不同的清理流程  </p><p>solution1-1：<br>此时，其实总的来说就两个问题。</p><ul><li>1.通用性 VS 定制化</li><li>2.流程复杂性</li></ul><p>这一阶段，我所掌握的知识相当有限。在我的认知范围内，我是这样思考的：</p><ul><li>1.由于各个业务流程过于复杂，如果单独为每个业务定制，那么后期维护复杂度会把我拖垮。于是我需要在所有业务中抽象出一个共性模型。在通用的基础上，用不同的策略（策略模式）去处理定制化问题</li><li>2.因为流程复杂多变，我对需求进行了分析，去google上参考业界通用流程，在复杂流程中关键步骤抽离出来，考虑各自成为服务，各服务无状态且可横向扩展。<br>让数据通过中间件为中转，流转于各个服务中，通过控制不同数据在服务中的流转顺序，以此来解决流程复杂性问题（后来考虑到维护成本，被要求压缩在一个服务里，通过方法调用来分割了）</li><li>3.但还有一个问题没有解决，各业务的定制化逻辑。这里比较困难的一点为，逻辑与渠道方高度耦合，即我们需要完全掌握业务方逻辑才可以定制出处理规则，这是相当困难的。<br>我曾考虑过采用动态加载插件的形式，让业务将他们的规则封装在一个插件中，交由我们在程序中热拔插。后来考虑到这其中的不可控性便被放弃了（例如业务方写的规则需要在我们服务上跑，很容易失控）。<br>最终，基于各种压力，我们选择将一小部分及其特殊的逻辑让各渠道方预处理（或是我们替其进行预处理），然后走入通用逻辑。</li></ul><p>在这一阶段，我的知识储备中并没有dag调度，大数据处理等概念。但是通过对业务的分析，已经衍生出雏形。</p><p>这也是我为什么强调，忘记自己的知识储备，从需求来分析需要什么，而不是你会什么。</p><p>-----------扩展-----------  </p><p>solution1-2：<br>后来接触了DAG调度平台，可以发现。其中的流程复杂性，便是dag中的流程控制。  </p><p>本质上与我们先前拆分为多个微服务进行处理并没有区别，只不过dag平台提供了更为巧妙的调度方式，以及更为简洁的编码。</p><p>让我们在思考一下，我们拥有了流程调度能力，并且我们的业务已经发展的比较复杂，各种渠道的定制化流程复杂交错。  </p><p>先前我们制定的通用化模型，应付现在的场景非常吃力。任何一个渠道的改动，均需们发版来更新，会影响到所有渠道的处理。而且每次改动均需考虑兼容性问题</p><p>此时，我们该如何协调定制化与通用化的矛盾呢？（该答案并未亲自实践）</p><p>答案是，反过来，在定制化的基础上做通用。  </p><p>先前我已经提到，我们是定时任务，也就意味着，当我们有能力通过调度平台将各渠道拆分后，我们并不需要程序一直在run。可以在需要被调度时，通过调度平台启动对应渠道的处理程序。</p><p>此时我们的编程思想要转换一下，我们的代码并不需要控制整个流程，而是像一个个插件一样被使用，我们仅需维护一个插件库。  </p><p>当某个渠道紧急需求过来时，我们可以在插件库中找到该渠道对应的通用模型，复制出来一份，对其进行紧急定制化。在后期维护时，我们尝试将定制化功能抽离成通用功能，再添加回插件库。</p><p>调度平台通过在我们插件库中选择合适的插件，编排出各个渠道的任务</p><p>solution1-3：<br>随着后来的学习，我们接触了大数据。了解到对于数据的处理，原来是已经有现成的轮子，不需要我们自己去费尽心思，进行横向扩展来增加吞吐。</p><p>那么回过头来，我们再思考一下。随着时间的增长，我们的程序资源占用逐渐出现了问题。</p><p>在高峰期，我们的任务全堆在一起，CPU内存带宽磁盘IO等非常吃紧，并且有宕机趋势。然而在非任务期间，所有资源全部闲置。那么我们该如何解决这个问题？</p><p>这里就不得不提到大数据平台了。之前提到，我们的数据流其实是在各个服务中流转的，这无疑增大了我们的负担。但如果，我们的程序仅仅负责命令流呢？</p><p>通过将数据加载到大数据平台，我们的插件被调度平台控制，向大数据平台提交命令，处理任务。整个流程中，我们的流程控制的机器几乎不会接触到任何数据流，命令的发出几乎不会消耗资源。</p><p>这时候你或许会问，大数据平台难道不需要消耗资源处理数据吗？</p><p>当然时需要的，只不过你是跟其他团队在共享资源。你的任务空闲时，这些资源会被其他团队使用。</p><p>当然类似的，你也可以做到与k8s团队合作，做到动态删减容器节点，在满足你使用的情况下节约资源</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;二、跳出固化思维&quot;&gt;&lt;a href=&quot;#二、跳出固化思维&quot; class=&quot;headerlink&quot; title=&quot;二、跳出固化思维&quot;&gt;&lt;/a&gt;二、跳出固化思维&lt;/h1&gt;&lt;p&gt;经过第一阶段在摸爬滚打，相信已经有了些许积累</summary>
      
    
    
    
    <category term="简记" scheme="https://ryanstian.github.io/blog/categories/%E7%AE%80%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>简记20210818234900</title>
    <link href="https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210818234900/"/>
    <id>https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210818234900/</id>
    <published>2021-08-18T15:49:00.000Z</published>
    <updated>2021-08-26T15:55:21.426Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="一、看清屎山"><a href="#一、看清屎山" class="headerlink" title="一、看清屎山"></a>一、看清屎山</h1><p>校招生踏入公司，普遍第一项工作是熟悉业务，熟悉架构，熟悉代码。</p><p>这个流程本没有错，那么坑在哪？在于习惯。新人就像海绵，看到什么，便会学什么</p><p>而大家都知道。业务代码，由于历史包袱，或是人力紧张，又或者是种种不可抗力因素，本身就是屎山中混杂金子。</p><p>有的新人懂得多，或者习惯求索原因，可以从中看出设计中不合理的地方  </p><p>而有些更为初学者的新人，则会在学习过程中全都当知识学进去，导致后续到自己设计时把代码补丁当成设计原则。不得不说，这简直是灾难</p><p>在这里，我不得不提醒大家们两点</p><ul><li>相信推理胜过相信别人。</li><li>防火防盗，防同事吹逼</li></ul><p>这两句话具体怎么理解，我给大家举个例子就懂了</p><ul><li>曾经有个team轰轰烈烈推广他们的工具，看完他们功能介绍PPT和文档，内部讨论一波，感觉这工具很可以。<br>后来找他们team开始深入沟通。然而这一沟通，就发现了大坑，大致过程如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一顿背景介绍过后。。。</span><br><span class="line"></span><br><span class="line">我方team：能给我们详细讲下你们这个架构是咋玩的吗？</span><br><span class="line">对方team：巴拉巴拉。。。</span><br><span class="line"></span><br><span class="line">我方team：诶，那这个xxx问题你们是怎么解决的？</span><br><span class="line">对方team：噢，我们是这个场景，巴拉巴拉。</span><br><span class="line"></span><br><span class="line">我方team：有点问题，那如果这个地方xxx你们怎么解决？</span><br><span class="line">对方team：额，这个问题我们不会遇到</span><br><span class="line"></span><br><span class="line">沉默ing。。。</span><br><span class="line"></span><br><span class="line">我方team：感谢感谢，了解了</span><br></pre></td></tr></table></figure>仔细品，我相信可以品出来很多东西。  </li></ul><p>很多情况下，我们的项目只适合于某些特定的场景，又或是迫于KPI，将半成品伪装成精品。</p><p>不是所有人都会承认自己项目存在缺陷，若是隐藏起缺陷，而你又被精美PPT忽悠了。那么恭喜，你又会隐藏起自己项目缺陷再次背刺下一位幸运儿。  </p><p>在工作中，最重要的，是相信自己的思考。伪装再好的缺陷，也能被找到蛛丝马迹。隐藏再深的金子，当思绪扫过，也能透出点点微光</p><p>总之一句话：屎山中淘金，莫把屎当宝</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;一、看清屎山&quot;&gt;&lt;a href=&quot;#一、看清屎山&quot; class=&quot;headerlink&quot; title=&quot;一、看清屎山&quot;&gt;&lt;/a&gt;一、看清屎山&lt;/h1&gt;&lt;p&gt;校招生踏入公司，普遍第一项工作是熟悉业务，熟悉架构，熟悉代码</summary>
      
    
    
    
    <category term="简记" scheme="https://ryanstian.github.io/blog/categories/%E7%AE%80%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>简记20210818234800</title>
    <link href="https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210818234800/"/>
    <id>https://ryanstian.github.io/blog/%E7%AE%80%E8%AE%B020210818234800/</id>
    <published>2021-08-18T15:48:00.000Z</published>
    <updated>2021-08-18T15:50:40.073Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>时光荏苒,不知不觉已然进入社会一个春秋  </p><p>博客的事情停滞许久。究其因，怠惰自然居首位，然还有一点便是提笔难下</p><p>一年前的自己，觉得自己懂得很多。一年后的自己，知道<br>自己才不过是刚刚入门。不得不说，学到的越多，越会发现自己的无知。</p><p>这一年里，求知，热情，激动，无奈，彷徨，最终归于平静。接下来我将逐渐记录这些岁月，记录这有趣的生活，以及一路上所学所看所感。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;时光荏苒,不知不觉已然进入社会一个春秋  &lt;/p&gt;
&lt;p&gt;博客的事情停滞许久。究其因，怠惰自然居首位，然还有一点便是提笔难下&lt;/p&gt;
&lt;p&gt;一年前的自己，觉得自己懂得很多。一年后的自己，知道&lt;br&gt;自己才不过是刚刚入门。不得不</summary>
      
    
    
    
    <category term="简记" scheme="https://ryanstian.github.io/blog/categories/%E7%AE%80%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
